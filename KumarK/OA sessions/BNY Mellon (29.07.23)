//https://docs.google.com/document/d/1tn-dP1ZznNLLghvsYPEQMwKO_uv15qG3Fs5toOdnpq4/edit

### O(N^2)
```
#include <bits/stdc++.h>
using namespace std ; 
typedef long long int ll ; 


bool check(ll g,vector <ll> &b){
    ll n = b.size();
    ll v = n - 1 ; 
    
    ll i = g - 1 ; 
    
    while(i>=0){
        
        if(b[v]<=b[i]){
            return false;
        }
        
        
        i--;
        v--;
    }
    return true;
}

int main() {
    
    ll n ; 
    cin>>n ; vector <ll> b ; 
    ll i = 0 ; 
    while(i<=n-1){
        ll yy ; 
        cin>>yy;
        b.push_back(yy);
        i++;
    }
    
    sort(b.begin(),b.end());
    
    ll answer = 0 ; 
    ll g = 1 ; 
    while(g<=n){
        
        if(check(g,b)==true){
            answer = g ; 
        }
        
        g++;
    }
    cout<<answer ;     
    return 0 ; 
}

8
1 3 5 2 1 5 1
```

## Method 2:- using binary search
```
#include <bits/stdc++.h>
using namespace std ; 
typedef long long int ll ; 


bool check(ll g,vector <ll> &b){
    
    if(g==0){
        return true;
    }
    
    ll n = b.size();
    ll v = n - 1 ; 
    
    ll i = g - 1 ; 
    
    while(i>=0){
        
        if(b[v]<=b[i]){
            return false;
        }
        
        
        i--;
        v--;
    }
    
    
    
    
    return true; 
    
    
    
    
    
}

int main() {
    
    ll n ; 
    cin>>n ; vector <ll> b ; 
    ll i = 0 ; 
    while(i<=n-1){
        ll yy ; 
        cin>>yy;
        b.push_back(yy);
        i++;
    }
    
    sort(b.begin(),b.end());
    
    ll answer = 0 ; 
    ll low = 0 ; 
    ll high = n ; 
    ll kk = 0 ; 
    while(low<=high && kk==0){
        ll mid = (low + high)/2;
        if(check(mid,b)==true && check(mid+1,b)==false){
            
            answer = mid;
            kk = 1 ;
            
        } else if(check(mid,b)==true && check(mid+1,b)==true){
            low = mid + 1 ; 
            
        }
        else{
            
            high = mid - 1 ;
        }   
    }
    cout<<answer ;     
    return 0 ; 
}

8
1 3 5 2 1 5 1
