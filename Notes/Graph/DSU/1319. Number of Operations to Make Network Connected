//

class Solution {
public:

  int find(int s,vector<int>&parent){
       if(parent[s] == s)
       return s;
       return parent[s] = find(parent[s],parent);
   }
    bool Union(int u,int v,vector<int> &rank,vector<int> &parent){
        int pu = find(u,parent),pv = find(v,parent);
        if(pu == pv)
        return true;
        if(rank[pu] < rank[pv]){
            parent[pu] = pv;
        }
        else {
            parent[pv] = pu;
            if(rank[pu] == rank[pv])
            rank[pu]++;
        }
        return false;
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1)
        return -1;
        vector<int>parent(n);
        vector<int>rank(n,0);
        for(int i=0;i<n;i++){
            parent[i] = i;
        }
        int extra = 0;
      int components = n;
        for(int i=0;i<connections.size();i++){
            int u = connections[i][0], v = connections[i][1];
            if(Union(u,v,rank,parent))
            extra++;
            else
            components--;
        }
       return components-1;
    }
};
