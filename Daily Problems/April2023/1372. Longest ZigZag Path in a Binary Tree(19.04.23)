//https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/


//Approach 1:-

class Solution {
public:
  int ans = 0;
void result(TreeNode* root,bool left,int steps){
    if(!root){
       return;
    }
   
    ans = max(ans,steps);
    if(left){
        result(root->left,false,steps+1);
         result(root->right,true,1);
    }
    else{
       result(root->left,false,1);
       result(root->right,true,steps+1);
    }
     
}


int longestZigZag(TreeNode* root) {
    if(!root)
       return 0;
    if(!root->left && !root->right)
      return 0;
    result(root->left,false,1);
    result(root->right,true,1);
    return ans;
   
    }
};


//Approach 2:-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
  

  int ans = 0;
// void result(TreeNode* root,bool left,int steps){
//     if(!root){
//        return;
//     }
   
//     ans = max(ans,steps);
//     if(left){
//         result(root->left,false,steps+1);
//          result(root->right,true,1);
//     }
//     else{
//        result(root->left,false,1);
//        result(root->right,true,steps+1);
//     }
     
// }
void result(TreeNode* root,int l,int r){
    if(!root)
     return;
    ans = max(ans,max(l,r));
    if(l == 0){
        result(root->left,r+1,0);
        result(root->right,0,1);
    }
    else{
        result(root->right,0,l+1);
        result(root->left,1,0);
    }
}

int longestZigZag(TreeNode* root) {
    if(!root)
       return 0;
    if(!root->left && !root->right)
      return 0;
    // result(root->left,false,1);
    // result(root->right,true,1);
    if(root->left)
    result(root->left,1,0);
    if(root->right)
    result(root->right,0,1);
    return ans;
   
    }
};
