//https://leetcode.com/problems/similar-string-groups/

class Solution {
public:
bool isSame(string s1,string s2){
    if(s1.length() != s2.length())
    return false;
    if(s1 == s2)
    return true;
    int i=0,j=0;
    int count = 0;
    while(i < s1.length()){
        if(s1[i] != s2[i]){
            count++;
        }
        i++;
        j++;
    }
    return count == 2;
}
    int numSimilarGroups(vector<string>& strs) {
        vector<vector<string>>store;
        int n = strs.size();
        store.push_back({strs[0]});
        for(int i=1;i<n;i++){
            bool found = false;
            for(int j=0;j<store.size();j++){
                for(int k=0;k<store[j].size();k++){
                    if(isSame(store[j][k],strs[i])){
                        store[j].push_back(strs[i]);
                        found=true;
                        break;
                    }
                }
            }
            if(!found){
                vector<string>new_store;
                new_store.push_back(strs[i]);
                store.push_back(new_store);
            }
        }
        return store.size();
    }
};


//Approach 2:-

class Solution {
public:
  bool isSame(string str1,string str2){
      if(str1.length() != str2.length())
      return false;
      if(str1 == str2)
      return true;
      int count = 0;
      for(int i=0;i<str1.length();i++){
          if(str1[i] != str2[i])
          count++;
      }
      return count == 2;
  }
  void dfs(int s,vector<bool>&visited,vector<int>adj[]){
      visited[s] = true;
      for(auto it:adj[s]){
          if(!visited[it])
          dfs(it,visited,adj);
      }
  }
  void bfs(int s,vector<bool>&visited,vector<int>adj[]){
      queue<int>q;
      q.push(s);
      while(!q.empty()){
          int temp = q.front();
          q.pop();
          visited[temp] = true;
          for(auto it:adj[temp]){
              if(!visited[it]){
                  q.push(it);
              }
          }
      }
  }
    int numSimilarGroups(vector<string>& strs) {
        int n = strs.size();
          vector<int>adj[n];
          for(int i=0;i<strs.size();i++){
              for(int j=i+1;j<strs.size();j++){
                  if(isSame(strs[i],strs[j])){
                      adj[i].push_back(j);
                      adj[j].push_back(i);
                  }
              }
          }
          int count = 0;
          vector<bool>visited(n,false);
          for(int i = 0;i<n;i++){
              for(auto it:adj[i]){
                  cout<<it<<" ";
              }
              cout<<"\n";
          }
          for(int i=0;i<visited.size();i++){
              if(!visited[i]){
                   count++;
                //    dfs(i,visited,adj);
                   bfs(i,visited,adj);
              }
          }
        
          return count;
    }
};




