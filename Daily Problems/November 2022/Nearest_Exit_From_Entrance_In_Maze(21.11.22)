class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int m = maze.size();
        int n = maze[0].size();
        
        vector<int> t(n, 0);
        vector<vector<int>> visited(m, t);
        
        // Filling up the visited[][] array with false. We will assume 
        // that '0's as visited since we can't visit them as given in the question.
        // for(int i=0;i<m; i++){
        //     for(int j=0; j<n; j++){
        //         if(maze[i][j] == '+')
        //             visited[i][j] = 1;
        //     }
        // }
        
        int moves = 0;
        queue<pair<int, int>> q;
        // Pushing the enterance and marking it visited
        q.push({entrance[0], entrance[1]});
        visited[entrance[0]][entrance[1]] = 1;
        
        while(!q.empty()){
            int size = q.size();
            for(int k=0; k<size; k++) {
                pair<int, int> f = q.front();
                q.pop();
                
                // If it is an edge && not the starting place, return moves
                if((f.first == 0 || f.first == m-1 || f.second == 0 || f.second == n-1) && (moves!=0)){
                    return moves;
                }
                
                // To iterate over the left, right, up and down cells.
                vector<int> row = {1,-1,0,0};
                vector<int> col = {0,0,1,-1};
                
                // Check for 4 adjacent plces and push them in queue if it satisfies the condns.
                for(int i=0; i<4; i++){
                    if(f.first+row[i] >=0  && f.first+row[i] < m &&
                       f.second+col[i] >=0 && f.second+col[i] <n &&
                       visited[f.first+row[i]][f.second+col[i]] == 0 &&
                       maze[f.first+row[i]][f.second+col[i]] == '.'
                      ) {
                        visited[f.first+row[i]][f.second+col[i]] = 1;
                        q.push({f.first+row[i], f.second+col[i]});
                    }
                }
            }
            // Increment the moves after every iteration.
            moves++;
        }
        
        // If it reaches here, it means that an edge is not reachable
        return -1;
    }
};










//My own solution
class Solution {
public:
   int result(vector<vector<char>>&maze,int i,int j){
       int n = maze.size(), m = maze[0].size();
       if(i == n-1 || i==0 || j == m-1 || j == 0)
       return 0;
       int steps = INT_MAX;
       if(i-1 >=0 && maze[i-1][j] != '+')
       steps = min(steps,result(maze,i-1,j)+1);
       if(i+1 < n && maze[i+1][j] != '+')
       steps = min(steps,result(maze,i+1,j)+1);
       if(j-1 >= 0 && maze[i][j-1] != '+')
       steps = min(steps,result(maze,i,j-1)+1);
       if(j+1 < m && maze[i][j+1] != '+')
       steps = min(steps,result(maze,i,j+1)+1);
    
      return steps;
   }
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
       queue<pair<int,int>>q;
       int moves = 0;
       int n = maze.size(),m = maze[0].size();
       vector<vector<int>>visited(n,vector<int>(m,0));
       q.push({entrance[0],entrance[1]});
       visited[entrance[0]][entrance[1]] =1;
       
       while(!q.empty()){
           int s = q.size();
        for(int i=0;i<s;i++){
          pair<int,int>p = q.front();
          q.pop();
          if(p.first == n-1 || p.first == 0 || p.second == m-1 || p.second == 0 && moves!=0){
               return moves;
          }
          int row[] = {-1,0,1,0,-1};
          for(int j=0;j<4;j++){
              if(p.first+row[j] >= 0 && p.first+row[j] < n && p.second+row[j+1]>=0 && p.second+row[j+1] < m && maze[p.first+row[j]][p.second+row[j+1]] == '.' && visited[p.first+row[j]][p.second+row[j+1]] == 0){
                  cout<<p.first+row[j]<<p.second+row[j+1]<<" ";
                  q.push({p.first+row[j],p.second+row[j+1]});
                  visited[p.first+row[j]][p.second+row[j+1]] = 1;
              }
          }
        }
        cout<<"\n";
        moves++;
       }
       return -1;
    }
};
