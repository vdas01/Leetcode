
//https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/description/
class Solution {
public:
   long long result(vector<vector<int>>&adj,int s,vector<bool>&visited){
      
       long long count = 0;
       count++;
       for(auto &it: adj[s]){
           if(!visited[it]){
               visited[it] = true;
               count+= result(adj,it,visited);
           }
       }
       return count;
   }
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<int>temp;
        vector<bool>visited(n,false);
        vector<vector<int>>adj(n,vector<int>(n));
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
          long long ans=0;
        long long total = 0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                visited[i] = true;
                long long k = result(adj,i,visited);
                total+=k;
                ans+= k * (n - total);
            }
        }
        return ans;
    }
};




class Solution {
public:
    void dfs(vector<int>adj[],int src,vector<bool>&vis,int &counter){
        if(vis[src]) return;
        vis[src]=true;
        counter++;
        for(auto ele:adj[src]){
            if(!vis[ele]){
                dfs(adj,ele,vis,counter);
            }
        }

    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<int>adj[n];
        for(auto ele:edges){
            adj[ele[0]].push_back(ele[1]);
            adj[ele[1]].push_back(ele[0]);
        }
        long long res = 0;
        vector<bool>vis(n,false);
        vector<int>temp;
        for(int i = 0;i<n;i++){
            if(!vis[i]){
                int counter = 0;
                dfs(adj,i,vis,counter);
               temp.push_back(counter);
            }
        }
        int total = 0;
        for(int i = 0;i<temp.size();i++){
            res+=(long)((long)temp[i]*(long)(n-total-temp[i]));
            total+=temp[i];
        }
        return res;
    }
};
