//https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* result(vector<int>&inorder,int inStart,int inEnd,vector<int>&postorder,int posStart,int posEnd,map<int,int>&m){
        if(inStart > inEnd || posStart > posEnd) return NULL;
        TreeNode* root = new TreeNode(postorder[posEnd]);
        int num_index = m[postorder[posEnd]];
        int num_left = num_index - inStart;
        root->left = result(inorder,inStart,num_index-1,postorder,posStart,posStart+num_left-1,m);
        root->right = result(inorder,num_index+1,inEnd,postorder,posStart+num_left,posEnd-1,m);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>m;
        if(inorder.size() != postorder.size())
        return NULL;
        int n = inorder.size();
        for(int i=0;i<n;i++)
        m[inorder[i]] = i;
        return result(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,m);
    }
};
