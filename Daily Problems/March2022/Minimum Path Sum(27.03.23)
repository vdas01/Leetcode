//https://leetcode.com/problems/minimum-path-sum/description/
class Solution {
public:
int result(vector<vector<int>>&grid,int i,int j,vector<vector<int>>&dp){
    int n = grid.size(),m = grid[0].size();
    if(i < 0 || i >=n || j<0 || j >=m)
    return INT_MAX;
    if(i == n-1 && j == m-1)
    return dp[i][j] = grid[i][j];
    if(dp[i][j] != -1)
    return dp[i][j];
    int sum = grid[i][j];
 
    sum+= min(result(grid,i+1,j,dp),result(grid,i,j+1,dp));
    return dp[i][j] = sum;

}
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size(), m =grid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return result(grid,0,0,dp);
    }
};
