//https://leetcode.com/problems/find-all-anagrams-in-a-string/description/


//Using two maps
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char,int>p_dup;
        unordered_map<char,int>s_dup;
        int i=0,n = p.length();
        while(i< p.length()){
            p_dup[p[i]]++;
            s_dup[s[i]]++;
            i++;
        }
        cout<<i<<"\n";
        vector<int>ans;
        while(i < s.length()){
            if(s_dup == p_dup){
               ans.push_back(i-n);
            }
            if(s_dup[s[i-n]] > 1)
            s_dup[s[i-n]]--;
            else
            s_dup.erase(s[i-n]);
            s_dup[s[i]]++;
            i++;
        }
        if(p_dup == s_dup)
        ans.push_back(i-n); 
        return ans;
    }
};

//using two frequency array
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int freq[26] = {0};
        vector<int>ans;
        if(s.length() == 0 || p.length() == 0)
         return ans;
        for(int i=0;i<p.length();i++)
        freq[p[i]-'a']++;
        for(int i=0;i<s.length();i++){
             if(freq[s[i]-'a'] > 0){
                int temp[26];
                copy(begin(freq),end(freq),begin(temp));
                 temp[s[i]-'a']--;
                 int count=1,index = i;
                 if(count == p.length())
                 ans.push_back(i);
                 else{
                     for(int j=i+1;j<s.length();j++){
                         if(temp[s[j]-'a'] > 0){
                             temp[s[j]-'a']--;
                             count++;
                         }
                         else
                         break;
                         if(count == p.length()){
                             ans.push_back(i);
                             break;
                         }
                     }
                 }
             }
        }
        return ans;
    }
};
