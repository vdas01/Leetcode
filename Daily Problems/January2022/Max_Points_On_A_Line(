//https://leetcode.com/problems/max-points-on-a-line/description/

BRUTE FORCE:-
class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        int result = INT_MIN;
        int n = points.size();
        if(n==1)
        return 1;
        for(int i=0;i<n;i++){
            int slope = 0;
            for(int j=i+1;j<n;j++){
                 int dy = points[j][1] - points[i][1];
                 int dx = points[j][0] - points[i][0];
                 int count = 2;
                 for(int k=0;k<n;k++){
                     if(k != i && k != j){
                         int dy2 = points[k][1] - points[i][1];
                         int dx2 = points[k][0] - points[i][0];
                         if(dy2 * dx == dy * dx2){
                             count++;
                         }
                     }
                 }
                 result = max(count,result);
            }
        }
        return result;
    }
};

O(N^2):-
class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        int result = INT_MIN;
       
        int n = points.size();
        if(n==1)
        return 1;
        for(int i=0;i<n;i++){
             unordered_map<double,int>mp;
            for(int j=0;j<n;j++){
                if(j == i) continue;
                int dy = points[j][1] - points[i][1];
                int dx = points[j][0] - points[i][0];
                double theta = atan2(dy,dx);
                mp[theta]++;
            }
            for(auto it:mp){
          result = max(result,it.second+1);
      }
        }
      
      return result;
    }
};

