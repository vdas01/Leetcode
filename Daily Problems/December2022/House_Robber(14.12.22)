//https://leetcode.com/problems/house-robber/description/

class Solution {
public:
    int result(vector<int>&nums,int i,vector<int>&dp){
        int n = nums.size();
        if(i>=n)
        return 0;
        if(dp[i] != -1)
        return dp[i];
        int take = 0,nottake = 0;
        take = nums[i] + result(nums,i+2,dp);
        nottake = result(nums,i+1,dp);
        return dp[i] = max(take,nottake);
    }
    int rob(vector<int>& nums) {
        if(nums.size() == 1)
        return nums[0];
        if(nums.size() == 2)
        return max(nums[1] ,nums[0]);
        vector<int>dp(nums.size(),-1);
        dp[0] = nums[0];
        dp[1] = max(nums[0],nums[1]);
        int n = nums.size();
        int prev1 = nums[0],prev2 = max(nums[0],nums[1]);
        // for(int i=2;i<n;i++){
        //     int take = dp[i-2] + nums[i];
        //     int nottake = dp[i-1];
        //     dp[i] = max(take,nottake);
        // }
        // return dp[n-1];
          for(int i=2;i<n;i++){
          int curr = max(prev1 + nums[i],prev2);
          prev1 = prev2;
          prev2 = curr;
        }
        return prev2;
    }
};
